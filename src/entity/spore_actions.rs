//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "spore_actions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub action_id: i32,
    pub action_type: i16,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub spore_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub from_address_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub to_address_id: Option<Vec<u8>>,
    pub created_at: DateTime,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub rgbpp_lock_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub rgbpp_unlock_id: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::FromAddressId",
        to = "super::addresses::Column::AddressId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses2,
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::ToAddressId",
        to = "super::addresses::Column::AddressId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses1,
    #[sea_orm(
        belongs_to = "super::rgbpp_locks::Entity",
        from = "Column::RgbppLockId",
        to = "super::rgbpp_locks::Column::LockId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RgbppLocks,
    #[sea_orm(
        belongs_to = "super::rgbpp_unlocks::Entity",
        from = "Column::RgbppUnlockId",
        to = "super::rgbpp_unlocks::Column::UnlockId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RgbppUnlocks,
    #[sea_orm(
        belongs_to = "super::spores::Entity",
        from = "Column::SporeId",
        to = "super::spores::Column::SporeId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Spores,
}

impl Related<super::rgbpp_locks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RgbppLocks.def()
    }
}

impl Related<super::rgbpp_unlocks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RgbppUnlocks.def()
    }
}

impl Related<super::spores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Spores.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
