//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::SporeActionType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "spore_actions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub tx: Vec<u8>,
    pub action_type: SporeActionType,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub spore_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub cluster_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub proxy_id: Option<Vec<u8>>,
    pub from_address_id: Option<String>,
    pub to_address_id: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub data_hash: Option<Vec<u8>>,
    pub content_type: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub content: Option<Vec<u8>>,
    pub cluster_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub cluster_description: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub mutant_id: Option<Vec<u8>>,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::FromAddressId",
        to = "super::addresses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses2,
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::ToAddressId",
        to = "super::addresses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses1,
}

impl ActiveModelBehavior for ActiveModel {}
