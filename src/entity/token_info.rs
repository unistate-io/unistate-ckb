//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, const_field_count::FieldCount)]
#[sea_orm(table_name = "token_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub type_id: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub transaction_hash: Vec<u8>,
    pub transaction_index: i32,
    pub decimal: i16,
    pub name: String,
    pub symbol: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub udt_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "Decimal(Some((39, 0)))", nullable)]
    pub expected_supply: Option<BigDecimal>,
    #[sea_orm(column_type = "Decimal(Some((39, 0)))", nullable)]
    pub mint_limit: Option<BigDecimal>,
    pub mint_status: Option<i16>,
    #[sea_orm(unique)]
    pub inscription_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::InscriptionId",
        to = "super::addresses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses2,
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::TypeId",
        to = "super::addresses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses1,
}

impl ActiveModelBehavior for ActiveModel {}
