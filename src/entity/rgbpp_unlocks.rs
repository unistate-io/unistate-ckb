//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rgbpp_unlocks")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(None))"
    )]
    pub unlock_id: Vec<u8>,
    pub version: i16,
    pub input_len: i16,
    pub output_len: i16,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub btc_tx: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub btc_tx_proof: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cluster_actions::Entity")]
    ClusterActions,
    #[sea_orm(has_many = "super::spore_actions::Entity")]
    SporeActions,
}

impl Related<super::cluster_actions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClusterActions.def()
    }
}

impl Related<super::spore_actions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SporeActions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
