//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "spores")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(None))"
    )]
    pub id: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub content_type: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub content: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub cluster_id: Option<Vec<u8>>,
    pub owner_address: Option<String>,
    pub is_burned: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::OwnerAddress",
        to = "super::addresses::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses,
    #[sea_orm(
        belongs_to = "super::clusters::Entity",
        from = "Column::ClusterId",
        to = "super::clusters::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Clusters,
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::clusters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clusters.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
