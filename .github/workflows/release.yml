name: Release Packaging and Docker Publish

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Release Packaging and Docker Publish
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: unistate-ckb

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build Project
        run: cargo build --release

      - name: List Files in Target Directory
        run: ls -la target/release/

      - name: Create Tarball
        run: tar czf ${{ env.PACKAGE_NAME }}.tar.gz -C target/release ${{ env.PACKAGE_NAME }}

      - name: List Files in Current Directory
        run: ls -la

      - name: Check if Tarball Exists
        run: |
          if [ ! -f "${{ env.PACKAGE_NAME }}.tar.gz" ]; then
            echo "Tarball does not exist!"
            exit 1
          fi

      - name: Upload Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: ${{ env.PACKAGE_NAME }}.tar.gz
          file: ${{ env.PACKAGE_NAME }}.tar.gz
          tag: ${{ github.ref_name }}
          overwrite: true

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Dockerfile
        run: |
          echo "FROM ubuntu:latest" > Dockerfile
          echo "RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*" >> Dockerfile
          echo "COPY ${{ env.PACKAGE_NAME }}.tar.gz /app/" >> Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "RUN tar xzf ${{ env.PACKAGE_NAME }}.tar.gz" >> Dockerfile
          echo "RUN mv ${{ env.PACKAGE_NAME }}/* /usr/local/bin/" >> Dockerfile
          echo "ENV PATH=\"/usr/local/bin:${PATH}\"" >> Dockerfile
          echo "CMD [\"${{ env.PACKAGE_NAME help }}\"]" >> Dockerfile

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
